// <copyright file="Plugin.cs" company="">
// Copyright (c) 2014 All Rights Reserved
// </copyright>
// <author></author>
// <date>8/29/2014 3:09:32 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace SendSMS
{
    using System;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class SMSPlugin : IPlugin
    {
       
        public void Execute(IServiceProvider serviceProvider)
        {
            IPluginExecutionContext context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = factory.CreateOrganizationService(context.UserId);
            messageSend.Service1 ss = new messageSend.Service1();
           //throw new InvalidPluginExecutionException("plugin fires");
            string phoneNumber = "";
            string message = "";
            Entity PreImage;
            Entity Image;

            try
            {
                if (context.InputParameters.Contains("EntityMoniker") &&
                  context.InputParameters["EntityMoniker"] is EntityReference)
                {
                    var myEntity = (EntityReference)context.InputParameters["EntityMoniker"];
                    var state = (OptionSetValue)context.InputParameters["State"];
                    var status = (OptionSetValue)context.InputParameters["Status"];
                    //throw new InvalidPluginExecutionException("before contains to and message");
                    Image = (Entity)context.PreEntityImages["new_sendsms"];
                    //Image = (Entity)context.PostEntityImages["new_sendsms"];

                    if (Image.Contains("new_to") && Image.Contains("new_message"))
                    {
                       
                        phoneNumber = Image.Attributes["new_to"].ToString();
                        message = Image.Attributes["new_message"].ToString();

                        if ((phoneNumber.Substring(0, 2) == "04" || phoneNumber.Substring(0, 4) != "+614") && message != "")
                        {
                            if (state.Value.ToString() == "1" && (status.Value.ToString() == "-1" || status.Value.ToString() == "2"))
                            {
                                //Image.Attributes["senton"] = Convert.ToDateTime(DateTime.Now).ToLocalTime().ToShortDateString();

                                if (ss.sendSMSservice(phoneNumber, message))
                                {
                                    //throw new InvalidPluginExecutionException("sms send.");

                                }
                                else
                                {
                                    throw new InvalidPluginExecutionException("Phone number is not valid or the Message is null.");
                                }
                            }
                        }
                        else
                        {
                            throw new InvalidPluginExecutionException("sms webservice error, please notice the system administrator.");
                        }

                        //throw new InvalidPluginExecutionException(string.Format("Entity Name: {0}, State: {1}, Status: {2}, toP: {3}, messageP: {4}", myEntity.LogicalName, state.Value.ToString(), status.Value.ToString(), phoneNumber, message));

                    }
                    else
                    {
                        //throw new InvalidPluginExecutionException(string.Format("Entity Name: {0}, State: {1}, Status: {2}", myEntity.LogicalName, state.Value.ToString(), status.Value.ToString()));
                    }
                }

                //if ((context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity && context.Depth < 2))
                //{
                //    Entity e = (Entity)context.InputParameters["Target"];

                //    if (e.Contains("statecode"))
                //    {

                //        var s = (OptionSetValue)e.Attributes["statecode"];
                        
                //        Entity messageParas = (Entity)context.PreEntityImages["new_sendsms"];

                //        throw new InvalidPluginExecutionException(s.Value + " " + messageParas.Attributes["new_message"].ToString() + " " + messageParas.Attributes["new_to"].ToString());
                //        //throw new InvalidPluginExecutionException(e.Attributes["statecode"].ToString() + "  " + e.Attributes["new_to"].ToString() + " " + e.Attributes["new_message"].ToString());

                //        if (e.Attributes.Contains("new_to") && e.Attributes.Contains("new_message"))
                //        {
                //            phoneNumber = e.Attributes["new_to"].ToString();
                //            message = e.Attributes["new_message"].ToString();

                //            if (ss.sendSMSservice(phoneNumber, message))
                //            {

                //            }
                //            else
                //            {
                //                throw new InvalidPluginExecutionException("sms webservice error, please notice the system administrator.");
                //            }
                //        }
                //    }sdfsdfsdfs
                //}sdfsdfsdfsdf
            }
            catch (Exception f)
            {
                throw new InvalidPluginExecutionException(f.Message.ToString());
            }

        }
    }
}